<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="admin">

<!-- ================================================================================ -->
	<select id="checkPw" parameterType="String" resultType="String">
		SELECT PASSWORD FROM BFS_USER WHERE ID=#{id}
	</select>
	<select id="checkState" parameterType="String" resultType="String">
		SELECT STATE_GB FROM BFS_USER WHERE ID=#{id}
	</select>
	<select id="checkId" parameterType="String" resultType="String">
		SELECT STATE_GB FROM BFS_USER WHERE ID=#{id}
	</select>
	
	<update id="updateLoginDate" parameterType="String">
		UPDATE BFS_USER
		SET LOGIN_DATE=TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS')
		WHERE ID=#{id}
	</update>
	
	<insert id="signUp" parameterType="hashmap">
		INSERT INTO BFS_USER
		VALUES(#{id},#{password},#{name},'US01',#{ip},TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS'),NULL,NULL,NULL,'로그인 기록 없음','회원')
	</insert>

	<select id="selectUserList" parameterType="hashmap" resultType="hashmap">
		SELECT * FROM 
		(SELECT ROWNUM RN,ID,PASSWORD,KOR_NAME,STATE_GB,REG_IP,REG_DATE,UPDATE_ID,UPDATE_IP,UPDATE_DATE,LOGIN_DATE
		 FROM(
		SELECT * FROM BFS_USER ORDER BY LOGIN_DATE DESC) ORDER BY RN)
		WHERE RN BETWEEN #{start} AND #{end}
	</select>

	<select id="searchUserList" parameterType="hashmap" resultType="hashmap">
		SELECT * FROM
		(SELECT ROWNUM RN,ID,PASSWORD,KOR_NAME,STATE_GB,REG_IP,REG_DATE,UPDATE_ID,UPDATE_IP,UPDATE_DATE,LOGIN_DATE
		 FROM(
		SELECT * FROM BFS_USER ORDER BY LOGIN_DATE DESC) 
		<choose>
			<when test="name != '' &amp;&amp; id == ''">
				WHERE KOR_NAME LIKE '%' || #{name} || '%' 
			</when>
			<when test="name == '' &amp;&amp; id != '' ">
				WHERE ID LIKE '%' || #{id} || '%' 
			</when>
			<when test="name != '' &amp;&amp; id != '' ">
				WHERE KOR_NAME LIKE '%' || #{name} || '%' AND ID LIKE '%' || #{id} || '%' 
			</when>
			<otherwise>
				
			</otherwise>
		</choose>
		ORDER BY RN)
		WHERE RN BETWEEN #{start} AND #{end}
	</select>
	
	<select id="getTotalRow" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*) FROM BFS_USER
		<choose>
			<when test="name != null &amp;&amp; id == null ">
				WHERE KOR_NAME LIKE '%' || #{name} || '%'
			</when>
			<when test="name == null &amp;&amp; id != null ">
				WHERE ID LIKE '%' || #{id} || '%'
			</when>
			<when test="name != null &amp;&amp; id != null ">
				WHERE KOR_NAME LIKE '%' || #{name} || '%' AND ID LIKE '%' || #{id} || '%'
			</when>
			<otherwise>
				
			</otherwise>
		</choose>
	</select>

	<select id="selectUserInfo" parameterType="String" resultType="hashmap">
		<![CDATA[
			SELECT * FROM BFS_USER WHERE ID=#{id}
		]]>
	</select>
	<select id="selectCodeInfo" parameterType="String" resultType="hashmap">
		<![CDATA[
			SELECT * FROM BFS_CODE WHERE MINOR_CD=#{minor_cd} AND MAJOR_CD = #{code}
		]]>
	</select>

	<update id="updateUser" parameterType="first.shopping.admin.bean.MemberBean">
		UPDATE BFS_USER 
		SET KOR_NAME=#{kor_name},PASSWORD=#{password},
			UPDATE_ID=#{update_id},UPDATE_IP=#{update_ip},UPDATE_DATE=TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS'),
			STATE_GB=#{state_gb},GRADE=#{grade}
		WHERE ID=#{id}
	</update>
<!-- ================================================================================ -->
	
	<resultMap id="CalList" type="hashmap">
		<result property="INFO" column="INFO" jdbcType="CLOB" javaType="String" />
	</resultMap>
	
	<select id="selectCalList" resultMap="CalList">
		
			SELECT  OFFER_NO , SUBSTR(OFFER_NO,1,8) WORK_DATE, SUBSTR(OFFER_NO,9,2) WORK_NUM , WORK_GB,
			        (SELECT KOR_NAME FROM BFS_CODE WHERE MAJOR_CD = 'WKGB' AND MINOR_CD = WORK_GB) WORK_KOR
			FROM    BFS_PRODUCT
			WHERE   SUBSTR(OFFER_NO,1,6) = DECODE(#{month},'12',#{year}||#{month},'11',#{year}||#{month},'10',#{year}||#{month},#{year}||'0'||#{month})
			GROUP BY OFFER_NO, WORK_GB
			ORDER BY WORK_DATE ASC, OFFER_NO ASC
		
	</select>
	
	<resultMap id="CodeList" type="hashmap">
		<result property="INFO" column="INFO" jdbcType="CLOB" javaType="String" />
	</resultMap>
	
	
	<select id="searchCodeList" resultMap="CodeList">
		SELECT * FROM 
		(SELECT ROWNUM RN, A.* FROM BFS_CODE A
		WHERE MAJOR_CD = #{code}
		<if test="name != null">
			AND KOR_NAME LIKE '%' || #{name} || '%' 
		</if>
		<if test="use != null">
			AND USE_GB LIKE '%' || #{use} || '%' 
		</if>
		ORDER BY USE_GB DESC, MINOR_CD ASC)
		WHERE RN BETWEEN #{start} AND #{end}
	</select>
	
	<select id="Code_getTotalRow" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*) FROM BFS_CODE
		WHERE MAJOR_CD = #{code}
		<if test="name != null">
			AND KOR_NAME LIKE '%' || #{name} || '%' 
		</if>
		<if test="use != null">
			AND USE_GB LIKE '%' || #{use} || '%' 
		</if>
	</select>

	<select id="Product_getTotalRow" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(OFFER_NO) FROM (
		SELECT  OFFER_NO , WORK_GB
		FROM    BFS_PRODUCT
		WHERE   1=1
		<if test="strdate != null">
		AND SUBSTR(OFFER_NO,1,8) BETWEEN #{strdate} and #{enddate}
		AND WORK_GB LIKE '%'||#{workgb}||'%' 
		</if>
		GROUP BY OFFER_NO, WORK_GB)
	</select>
	
	<resultMap id="ProductList" type="hashmap">
	<result property="INFO" column="INFO" jdbcType="CLOB" javaType="String" />
	</resultMap>
	
	
	<select id="searchProductList" parameterType="hashmap" resultMap="ProductList">
		<![CDATA[
		SELECT * FROM 
		(SELECT ROWNUM RN, a.* FROM 
			(SELECT  OFFER_NO
					, SUBSTR(OFFER_NO,1,4)||'년'||SUBSTR(OFFER_NO,5,2)||'월'|| SUBSTR(OFFER_NO,7,2)||'일' WORK_DATE
					, SUBSTR(OFFER_NO,9,2) WORK_NUM 
					, WORK_GB
					, (SELECT KOR_NAME FROM BFS_CODE WHERE MAJOR_CD = 'WKGB' AND MINOR_CD = WORK_GB) WORK_KOR
					, MAGAM_GB
				FROM    BFS_PRODUCT
				WHERE   1=1
			GROUP BY OFFER_NO, WORK_GB, MAGAM_GB
			ORDER BY OFFER_NO DESC) a)
		WHERE RN BETWEEN #{start} AND #{end}
		]]>
	</select>
	
	<resultMap id="ProductList_Detail" type="hashmap">
	<result property="INFO" column="INFO" jdbcType="CLOB" javaType="String" />
	</resultMap>
	

	<select id="searchProductList_Detail"  resultMap="ProductList_Detail">
		<![CDATA[
			SELECT a.OFFER_NO, a.WORK_GB, a.PRO_GB 
					, (SELECT KOR_NAME FROM BFS_CODE WHERE MAJOR_CD = 'PRGB' AND MINOR_CD = a.PRO_GB) KOR_NAME 
			        , a.PRE_QTY+b.PRE_QTY PRE_TOTAL_QTY
			        , DECODE(a.QTY,-999999,0,a.QTY)+decode(b.QTY,-999999,0,b.QTY) TOTAL_QTY
			        , a.PRE_QTY PRE_QTY_ST01, DECODE(a.QTY,-999999,0,a.QTY) QTY_ST01
			        , b.PRE_QTY PRE_QTY_ST02, DECODE(b.QTY,-999999,0,b.QTY) QTY_ST02
			        , a.PRE_QTY+b.PRE_QTY+DECODE(a.QTY,-999999,0,a.QTY)+DECODE(b.QTY,-999999,0,b.QTY) END_TOTAL_QTY
			        , a.PRE_QTY+DECODE(a.QTY,-999999,0,a.QTY) END_QTY_ST01
			        , b.PRE_QTY+DECODE(b.QTY,-999999,0,b.QTY) END_QTY_ST02
			        
			FROM (
			SELECT OFFER_NO,WORK_GB,PRO_GB,SUM(PRE_QTY) PRE_QTY, SUM(QTY) QTY  FROM(
			    SELECT OFFER_NO,WORK_GB,PRO_GB,STATE_GB
			        ,NVL((SELECT SUM(QTY) FROM BFS_PRODUCT WHERE OFFER_NO < #{offer_no} AND STATE_GB = 'ST01' AND PRO_GB = A.PRO_GB),0) PRE_QTY
			        ,NVL(QTY,0) QTY
			    FROM BFS_PRODUCT A
			    WHERE OFFER_NO = #{offer_no}
			    AND STATE_GB = 'ST01'
			    UNION
			    SELECT #{offer_no} OFFER_NO,  #{work_gb} WORK_GB, PRO_GB, 'ST01' STATE_GB
			            , NVL((SELECT SUM(QTY) FROM BFS_PRODUCT WHERE OFFER_NO < #{offer_no} AND STATE_GB = 'ST01' AND PRO_GB = A.PRO_GB),0) PRE_QTY
			            , -999999 QTY
			    FROM(
			        SELECT MINOR_CD PRO_GB FROM BFS_CODE 
			        WHERE MAJOR_CD = 'PRGB'
			        AND USE_GB = 'Y'
			        MINUS
			        SELECT PRO_GB FROM BFS_PRODUCT
			        WHERE OFFER_NO = #{offer_no}
			        AND STATE_GB = 'ST01') A
			        )
			GROUP BY OFFER_NO,WORK_GB,PRO_GB) a,
			(SELECT OFFER_NO,WORK_GB,PRO_GB,SUM(PRE_QTY) PRE_QTY, SUM(QTY) QTY FROM(
			    SELECT OFFER_NO,WORK_GB,PRO_GB,STATE_GB
			        ,NVL((SELECT SUM(QTY) FROM BFS_PRODUCT WHERE OFFER_NO < #{offer_no} AND STATE_GB = 'ST02' AND PRO_GB = A.PRO_GB),0) PRE_QTY
			        ,NVL(QTY,0) QTY
			    FROM BFS_PRODUCT A
			    WHERE OFFER_NO = #{offer_no}
			    AND STATE_GB = 'ST02'
			    UNION
			    SELECT #{offer_no} OFFER_NO, #{work_gb} WORK_GB, PRO_GB, 'ST02' STATE_GB 
			            , NVL((SELECT SUM(QTY) FROM BFS_PRODUCT WHERE OFFER_NO < #{offer_no} AND STATE_GB = 'ST02' AND PRO_GB = A.PRO_GB),0) PRE_QTY
			            , -999999 QTY
			    FROM(
			        SELECT MINOR_CD PRO_GB FROM BFS_CODE 
			        WHERE MAJOR_CD = 'PRGB'
			        AND USE_GB = 'Y'
			        MINUS
			        SELECT PRO_GB FROM BFS_PRODUCT
			        WHERE OFFER_NO = #{offer_no}
			        AND STATE_GB = 'ST02') A
			        )
			GROUP BY OFFER_NO,WORK_GB,PRO_GB)b
			where a.offer_no = b.offer_no
			and  a.work_gb = b.work_gb 
			and  a.pro_gb = b.pro_gb
			ORDER BY PRO_GB ASC
		]]>
	</select>
	
	
	<select id="searchinfo" resultMap="ProductList_Detail">
		<![CDATA[
			SELECT OFFER_NO
					,A.WORK_GB
					,SUBSTR(A.OFFER_NO,1,4)||'년'||SUBSTR(A.OFFER_NO,5,2)||'월'||SUBSTR(A.OFFER_NO,7,2)||'일' WORK_DATE_KR
					,SUBSTR(A.OFFER_NO,1,8) WORK_DATE
					,(SELECT KOR_NAME 
						FROM BFS_CODE 
						WHERE MAJOR_CD = 'WKGB'
						AND MINOR_CD = A.WORK_GB) WORK_GB_KR
					,NVL(A.MAGAM_GB,'N') MAGAM_GB
			FROM	BFS_PRODUCT A
			WHERE	A.OFFER_NO = #{offer_no}	
			GROUP BY A.OFFER_NO, A.WORK_GB, A.MAGAM_GB
		]]>
	</select>
	
	<select id="serchofferno" parameterType="String" resultType="String">
		SELECT MAX(OFFER_NO)+1 OFFER_NO
		FROM(
			SELECT OFFER_NO FROM BFS_PRODUCT WHERE SUBSTR(OFFER_NO,1,8)= TO_CHAR(CURRENT_TIMESTAMP, 'YYYYMMDD')
			UNION
			SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYYMMDD')||'00' FROM DUAL
			)
	</select>
	
	
	<insert id="ipgoinsert_st01" parameterType="hashmap">
		INSERT INTO BFS_PRODUCT (OFFER_NO, WORK_GB, PRO_GB, STATE_GB, QTY, UPDATE_DATE, UPDATE_MAN, MAGAM_GB)
		VALUES(#{OFFER_NO},'WK01',#{PRO_GB},'ST01',#{QTY_ST01},SYSDATE,'TEST','N')
	</insert>
	
	<insert id="ipgoinsert_st02" parameterType="hashmap">
		INSERT INTO BFS_PRODUCT (OFFER_NO, WORK_GB, PRO_GB, STATE_GB, QTY, UPDATE_DATE, UPDATE_MAN, MAGAM_GB)
		VALUES(#{OFFER_NO},'WK01',#{PRO_GB},'ST02',#{QTY_ST02},SYSDATE,'TEST','N')
	</insert>
	
	<insert id="jegoinsert_st01_wk02" parameterType="hashmap">
		INSERT INTO BFS_PRODUCT (OFFER_NO, WORK_GB, PRO_GB, STATE_GB, QTY, UPDATE_DATE, UPDATE_MAN, MAGAM_GB)
		VALUES(#{OFFER_NO},'WK02',#{PRO_GB},'ST01',#{QTY_ST01},SYSDATE,'TEST','N')
	</insert>
	
	<insert id="jegoinsert_st02_wk02" parameterType="hashmap">
		INSERT INTO BFS_PRODUCT (OFFER_NO, WORK_GB, PRO_GB, STATE_GB, QTY, UPDATE_DATE, UPDATE_MAN, MAGAM_GB)
		VALUES(#{OFFER_NO},'WK02',#{PRO_GB},'ST02',#{QTY_ST02},SYSDATE,'TEST','N')
	</insert>
	
	<insert id="jegoinsert_st01_wk03" parameterType="hashmap">
		INSERT INTO BFS_PRODUCT (OFFER_NO, WORK_GB, PRO_GB, STATE_GB, QTY, UPDATE_DATE, UPDATE_MAN, MAGAM_GB)
		VALUES(#{OFFER_NO},'WK03',#{PRO_GB},'ST01',-#{QTY_ST01},SYSDATE,'TEST','N')
	</insert>
	
	<insert id="jegoinsert_st02_wk03" parameterType="hashmap">
		INSERT INTO BFS_PRODUCT (OFFER_NO, WORK_GB, PRO_GB, STATE_GB, QTY, UPDATE_DATE, UPDATE_MAN, MAGAM_GB)
		VALUES(#{OFFER_NO},'WK03',#{PRO_GB},'ST02',-#{QTY_ST02},SYSDATE,'TEST','N')
	</insert>
	
	<delete id="product_delete" parameterType="hashmap">
		DELETE FROM BFS_PRODUCT
		WHERE OFFER_NO = #{offer_no}
	</delete>
	
	<update id="magam" parameterType="hashmap">
		<![CDATA[
			UPDATE BFS_PRODUCT
			SET MAGAM_GB = 'Y' 
			WHERE NVL(MAGAM_GB,'N') = 'N' 
			AND offer_no <> #{offer_no}
		]]>
	</update>
	
	<select id="magamcheck" parameterType="hashmap">
		SELECT MAGAM_GB 
		FROM BFS_PRODUCT
		WHERE OFFER_NO = #{offer_no}
	</select>
	
	<select id="pro_det_jego_wk03" resultMap="ProductList_Detail">
		<![CDATA[
			SELECT a.OFFER_NO, a.WORK_GB, a.PRO_GB 
			        , (SELECT KOR_NAME FROM BFS_CODE WHERE MAJOR_CD = 'PRGB' AND MINOR_CD = a.PRO_GB) KOR_NAME 
			        , DECODE(a.QTY,-999999,0,a.QTY)+decode(b.QTY,-999999,0,b.QTY) TOTAL_QTY
			        , DECODE(a.QTY,-999999,0,a.QTY) QTY_ST01
			        , DECODE(b.QTY,-999999,0,b.QTY) QTY_ST02
			FROM (
			        SELECT OFFER_NO,WORK_GB,PRO_GB, SUM(QTY) QTY 
			        FROM(
			                SELECT OFFER_NO,WORK_GB,PRO_GB,STATE_GB
			                    ,NVL(QTY,0) QTY
			                FROM BFS_PRODUCT A
			                WHERE OFFER_NO = #{offer_no}
			                AND STATE_GB = 'ST01'
			                AND WORK_GB = 'WK03'
			                UNION
			                SELECT #{offer_no}  OFFER_NO,  'WK03' WORK_GB, PRO_GB, 'ST01' STATE_GB
			                        , -999999 QTY
			                FROM(
			                    SELECT MINOR_CD PRO_GB FROM BFS_CODE 
			                    WHERE MAJOR_CD = 'PRGB'
			                    AND USE_GB = 'Y'
			                    MINUS
			                    SELECT PRO_GB FROM BFS_PRODUCT
			                    WHERE OFFER_NO = #{offer_no}
			                    AND STATE_GB = 'ST01'
			                    AND WORK_GB = 'WK03') A
			                            )
			        GROUP BY OFFER_NO,WORK_GB,PRO_GB
			    ) a,
			    (
			        SELECT OFFER_NO,WORK_GB,PRO_GB, SUM(QTY) QTY 
			        FROM(
			            SELECT OFFER_NO,WORK_GB,PRO_GB,STATE_GB
			                ,NVL(QTY,0) QTY
			            FROM BFS_PRODUCT A
			            WHERE OFFER_NO = #{offer_no}
			            AND STATE_GB = 'ST02'
			            AND WORK_GB = 'WK03'
			            UNION
			            SELECT #{offer_no} OFFER_NO, 'WK03' WORK_GB, PRO_GB, 'ST02' STATE_GB 
			                    , -999999 QTY
			            FROM(
			                SELECT MINOR_CD PRO_GB FROM BFS_CODE 
			                WHERE MAJOR_CD = 'PRGB'
			                AND USE_GB = 'Y'
			                MINUS
			                SELECT PRO_GB FROM BFS_PRODUCT
			                WHERE OFFER_NO = #{offer_no}
			                AND STATE_GB = 'ST02'
			                AND WORK_GB = 'WK03') A
			                )
			        GROUP BY OFFER_NO,WORK_GB,PRO_GB
			    )b
			where a.offer_no = b.offer_no
			and  a.work_gb = b.work_gb 
			and  a.pro_gb = b.pro_gb
			ORDER BY PRO_GB ASC
		]]>
	</select>
	
	
	<select id="pro_det_jego_wk02" parameterType="hashmap" resultMap="ProductList_Detail">
		<![CDATA[
			SELECT a.OFFER_NO, a.WORK_GB, a.PRO_GB 
			        , (SELECT KOR_NAME FROM BFS_CODE WHERE MAJOR_CD = 'PRGB' AND MINOR_CD = a.PRO_GB) KOR_NAME 
			        , DECODE(a.QTY,-999999,0,a.QTY)+decode(b.QTY,-999999,0,b.QTY) TOTAL_QTY
			        , DECODE(a.QTY,-999999,0,a.QTY) QTY_ST01
			        , DECODE(b.QTY,-999999,0,b.QTY) QTY_ST02
			FROM (
			        SELECT OFFER_NO,WORK_GB,PRO_GB, SUM(QTY) QTY 
			        FROM(
			                SELECT OFFER_NO,WORK_GB,PRO_GB,STATE_GB
			                    ,NVL(QTY,0) QTY
			                FROM BFS_PRODUCT A
			                WHERE OFFER_NO = #{offer_no}
			                AND STATE_GB = 'ST01'
			                AND WORK_GB = 'WK02'
			                UNION
			                SELECT #{offer_no}  OFFER_NO,  'WK02' WORK_GB, PRO_GB, 'ST01' STATE_GB
			                        , -999999 QTY
			                FROM(
			                    SELECT MINOR_CD PRO_GB FROM BFS_CODE 
			                    WHERE MAJOR_CD = 'PRGB'
			                    AND USE_GB = 'Y'
			                    MINUS
			                    SELECT PRO_GB FROM BFS_PRODUCT
			                    WHERE OFFER_NO = #{offer_no}
			                    AND STATE_GB = 'ST01'
			                    AND WORK_GB = 'WK02') A
			                            )
			        GROUP BY OFFER_NO,WORK_GB,PRO_GB
			    ) a,
			    (
			        SELECT OFFER_NO,WORK_GB,PRO_GB, SUM(QTY) QTY 
			        FROM(
			            SELECT OFFER_NO,WORK_GB,PRO_GB,STATE_GB
			                ,NVL(QTY,0) QTY
			            FROM BFS_PRODUCT A
			            WHERE OFFER_NO = #{offer_no}
			            AND STATE_GB = 'ST02'
			            AND WORK_GB = 'WK02'
			            UNION
			            SELECT #{offer_no} OFFER_NO, 'WK02' WORK_GB, PRO_GB, 'ST02' STATE_GB 
			                    , -999999 QTY
			            FROM(
			                SELECT MINOR_CD PRO_GB FROM BFS_CODE 
			                WHERE MAJOR_CD = 'PRGB'
			                AND USE_GB = 'Y'
			                MINUS
			                SELECT PRO_GB FROM BFS_PRODUCT
			                WHERE OFFER_NO = #{offer_no}
			                AND STATE_GB = 'ST02'
			                AND WORK_GB = 'WK02') A
			                )
			        GROUP BY OFFER_NO,WORK_GB,PRO_GB
			    )b
			where a.offer_no = b.offer_no
			and  a.work_gb = b.work_gb 
			and  a.pro_gb = b.pro_gb
			ORDER BY PRO_GB ASC
		]]>
	</select>
	
	<select id="pro_det_jego_pre" resultMap="ProductList_Detail">
		<![CDATA[
			SELECT A.PRO_GB, B.QTY PRE_QTY_ST02, A.QTY PRE_QTY_ST01 , (B.QTY + A.QTY) PRE_TOTAL_QTY 
			       ,(SELECT KOR_NAME FROM BFS_CODE WHERE MAJOR_CD = 'PRGB' AND MINOR_CD = A.PRO_GB) KOR_NAME
			FROM
			    (SELECT   MINOR_CD PRO_GB 
			             ,NVL((SELECT SUM(QTY) FROM BFS_PRODUCT WHERE OFFER_NO < #{offer_no} AND PRO_GB = A.MINOR_CD AND STATE_GB = 'ST01'),'0') QTY
			    FROM BFS_CODE A
			    WHERE    MAJOR_CD = 'PRGB'
			    AND      USE_GB = 'Y') A,
			    (SELECT   MINOR_CD PRO_GB 
			             ,NVL((SELECT SUM(QTY) FROM BFS_PRODUCT WHERE OFFER_NO < #{offer_no} AND PRO_GB = A.MINOR_CD AND STATE_GB = 'ST02'),'0') QTY
			    FROM BFS_CODE A
			    WHERE    MAJOR_CD = 'PRGB'
			    AND      USE_GB = 'Y') B
			WHERE A.PRO_GB = B.PRO_GB
			ORDER BY A.PRO_GB ASC
		]]>
	</select>
	
	<select id="serchcode" parameterType="String" resultType="String">
		<![CDATA[
		SELECT DECODE(LENGTH(MAX(MINOR_CD)+1),'1','000','2','00','3','0','4','') || TO_CHAR(MAX(MINOR_CD)+1)
		FROM (
		        SELECT '0000' MINOR_CD FROM DUAL
		        UNION
		        SELECT MINOR_CD FROM BFS_CODE 
		        WHERE MAJOR_CD = #{code}
		      )
		]]>
	</select>
	
	<update id="updatecode" parameterType="first.shopping.admin.bean.MemberBean">
		<![CDATA[
			UPDATE BFS_CODE
			SET KOR_NAME = #{kor_name} ,UPDATE_DATE = TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS'), UPDATE_MAN = #{update_id} , USE_GB = #{state_gb}, END_DATE = #{id}
			WHERE MAJOR_CD = 'PRGB'
			AND MINOR_CD = #{code_cd}
		]]>
	</update>
	
	<insert id="insertcode" parameterType="hashmap">
		INSERT INTO BFS_CODE
		VALUES(#{grade},#{code_cd},#{kor_name},TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS'),#{update_id},'Y','',TO_CHAR(SYSDATE,'YYYYMMDD'))
	</insert>
	
	<update id="createBFS_CODE" parameterType="String">
		<![CDATA[
		  CREATE TABLE "SYSTEM"."BFS_CODE" 
		   (	"MAJOR_CD" VARCHAR2(4 BYTE) NOT NULL ENABLE, 
			"MINOR_CD" VARCHAR2(4 BYTE) NOT NULL ENABLE, 
			"KOR_NAME" VARCHAR2(30 BYTE) NOT NULL ENABLE, 
			"UPDATE_DATE" VARCHAR2(50 BYTE), 
			"UPDATE_MAN" VARCHAR2(10 BYTE), 
			"USE_GB" VARCHAR2(1 BYTE), 
			"END_DATE" VARCHAR2(8 BYTE), 
			"STR_DATE" VARCHAR2(8 BYTE)
		   ) SEGMENT CREATION IMMEDIATE 
		  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
		 NOCOMPRESS LOGGING
		  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
		  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
		  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
		  TABLESPACE "USERS"
		]]>
	</update>
	
	<update id="createBFS_USER" parameterType="String">
		<![CDATA[
		  CREATE TABLE "SYSTEM"."BFS_USER" 
		   (	"ID" VARCHAR2(45 BYTE) NOT NULL ENABLE, 
			"PASSWORD" VARCHAR2(45 BYTE) NOT NULL ENABLE, 
			"KOR_NAME" VARCHAR2(30 BYTE) NOT NULL ENABLE, 
			"STATE_GB" VARCHAR2(10 BYTE) NOT NULL ENABLE, 
			"REG_IP" VARCHAR2(50 BYTE), 
			"REG_DATE" VARCHAR2(50 BYTE), 
			"UPDATE_ID" VARCHAR2(45 BYTE), 
			"UPDATE_IP" VARCHAR2(50 BYTE), 
			"UPDATE_DATE" VARCHAR2(50 BYTE), 
			"LOGIN_DATE" VARCHAR2(50 BYTE), 
			"GRADE" VARCHAR2(10 BYTE), 
			 CONSTRAINT "PK_BFS_USER" PRIMARY KEY ("ID")
		  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
		  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
		  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
		  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
		  TABLESPACE "USERS"  ENABLE
		   ) SEGMENT CREATION IMMEDIATE 
		  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
		 NOCOMPRESS LOGGING
		  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
		  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
		  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
		  TABLESPACE "USERS" 
		]]>
	</update>
	
	<update id="createBFS_PRODUCT" parameterType="String">
		<![CDATA[
		  CREATE TABLE "SYSTEM"."BFS_PRODUCT" 
		   (	"OFFER_NO" VARCHAR2(10 BYTE) NOT NULL ENABLE, 
			"WORK_GB" VARCHAR2(4 BYTE) NOT NULL ENABLE, 
			"PRO_GB" VARCHAR2(4 BYTE) NOT NULL ENABLE, 
			"STATE_GB" VARCHAR2(4 BYTE) NOT NULL ENABLE, 
			"QTY" NUMBER NOT NULL ENABLE, 
			"UPDATE_DATE" DATE NOT NULL ENABLE, 
			"UPDATE_MAN" VARCHAR2(10 BYTE) NOT NULL ENABLE, 
			"MAGAM_GB" VARCHAR2(1 BYTE), 
			"BIGO" VARCHAR2(4 BYTE)
		   ) SEGMENT CREATION IMMEDIATE 
		  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
		 NOCOMPRESS LOGGING
		  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
		  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
		  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
		  TABLESPACE "USERS"
		]]>
	</update>


	<insert id="insertcode2" parameterType="String">
		<![CDATA[
			INSERT INTO BFS_CODE(MAJOR_CD,MINOR_CD,KOR_NAME,USE_GB)
			select 'WKGB' MAJOR_CD ,'WK03' MINOR_CD,'판매' KOR_NAME,'Y' USE_GB from dual
			union
			select 'WKGB','WK01','입고','Y' from dual
			union
			select 'WKGB','WK02','재고','Y' from dual
			union
			select 'STGB','ST01','진열','Y' from dual
			union
			select 'STGB','ST02','창고','Y' from dual
			union
			select 'STGB','US01','사용','Y' from dual
			union
			select 'STGB','US02','미사용','Y' from dual
		]]>
	</insert>
	
	<insert id="insertuser" parameterType="String">
		<![CDATA[
			INSERT INTO BFS_USER (ID,PASSWORD,KOR_NAME,STATE_GB,GRADE)
			VALUES('admin','dkfmaekdnsrkrp','관리자','US01','관리자')
		]]>
	</insert>
	
	<!-- ================================================================================ -->
	
	<select id="Code_getTotalRow_v2" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*) FROM BFS_PROCODE
		WHERE CODE_GB = #{code_gb}
		<if test="name != null">
			AND CODE_NM LIKE '%' || #{name} || '%' 
		</if>
		<if test="use != null">
			AND DECODE(END_DATE,NULL,'Y','N') LIKE '%' || #{use} || '%' 
		</if>
	</select>
	
	<select id="searchCodeList_v2" resultMap="CodeList">
		<![CDATA[
		SELECT * 
		FROM (  SELECT  ROWNUM RN, CODE, CODE_NM, CODE_GB,
		        DECODE(CODE_GB ,'A','최상위코드','B',CODE_A,'C',CODE_B,'코드분류오류') UP_CODE,
		        DECODE(CODE_GB ,'A','','B',CODE_A_NM,'C',CODE_B_NM,'코드분류오류') UP_CODE_NM,
		        DECODE(END_DATE,NULL, '사용중', '정지') AS USE_YN, STAR_DATE, END_DATE,
		    	DECODE(END_DATE,NULL, 'Y','N') USE_GB, UPDATE_DATE
				FROM BFS_PROCODE A
				WHERE CODE_GB = #{code_gb}
		]]>
				<if test="name != null">
					AND CODE_NM LIKE '%' || #{name} || '%' 
				</if>
				<if test="use != null">
					AND DECODE(END_DATE,NULL,'Y','N') LIKE '%' || #{use} || '%' 
				</if>
				ORDER BY DECODE(END_DATE,NULL, '1', '2') ASC, CODE ASC)
		WHERE RN BETWEEN #{start} AND #{end}

	</select>
	
	<select id="selectCodeInfo_v2" parameterType="String" resultType="hashmap">
		<![CDATA[
			SELECT A.*,
			        (CASE WHEN NVL(END_DATE,'29991231') > TO_CHAR(SYSDATE, 'YYYYMMDD') THEN 'Y' ELSE 'N' END) UPDATE_YN,
			        DECODE(END_DATE,NULL,'Y','N') USE_YN,
			        DECODE(CODE_GB ,'A','최상위코드','B',CODE_A,'C',CODE_B,'코드분류오류') UP_CODE,
       				DECODE(CODE_GB ,'A','','B',CODE_A_NM,'C',CODE_B_NM,'코드분류오류') UP_CODE_NM
			FROM    BFS_PROCODE A
			WHERE   CODE_GB = #{code_gb}
			AND     CODE = #{code}
		]]>
	</select>
	
	<select id="serchcode_v2" parameterType="String" resultType="String">
		<![CDATA[
		SELECT  #{code}||DECODE(LENGTH(TO_CHAR(CODE_NUM)+1),1,'0000',2,'000',3,'00',4,'0','')||TO_CHAR(CODE_NUM+1) NEXT_CODE
		FROM    (SELECT  MAX(TO_NUMBER(CODE_NUM)) CODE_NUM 
		         FROM    (SELECT SUBSTR(CODE,2) CODE_NUM
		                 FROM BFS_PROCODE
		                 WHERE CODE_GB = #{code}
		                 UNION
		                 SELECT '00000' 
		                 FROM DUAL)
		        ) A 
		]]>
	</select>
	
	<select id="select_upcode" parameterType="String" resultType="hashmap">
		<![CDATA[
		SELECT CODE, CODE_NM
		FROM    (SELECT '' CODE, '최상위코드입니다' CODE_NM, 'AM' CODE_GB, '19991030' STAR_DATE, '29991231' END_DATE  FROM DUAL
		         UNION
		         SELECT CODE, CODE_NM, CODE_GB,STAR_DATE,END_DATE 
		         FROM (SELECT CODE, CODE_NM, CODE_GB,STAR_DATE,END_DATE  FROM BFS_PROCODE
		         		UNION
		         		SELECT '000000', '선택해주세요', 'A', '19991030', '29991231' FROM DUAL
		         		UNION
		         		SELECT '000000', '선택해주세요', 'B', '19991030', '29991231' FROM DUAL
		        	   )
		        )
		WHERE   CODE_GB = DECODE(#{code_gb},'A','AM','B','A','C','B','CODE_ERR')
		AND     NVL(END_DATE,'29991231')>to_char(sysdate,'yyyymmdd')+1
		ORDER BY CODE ASC
		]]>
	</select>
	
	<insert id="insertcode_v2" parameterType="hashmap">
		<![CDATA[
		INSERT INTO BFS_PROCODE (CODE, CODE_NM, CODE_GB,
                        CODE_A, CODE_A_NM,
                        CODE_B, CODE_B_NM,
                        CODE_C, CODE_C_NM,
                        BIGO, STAR_DATE, UPDATE_DATE)
		VALUES (#{code},#{code_nm},#{code_gb},
		        DECODE(#{code_gb},'A',#{code},'B',#{up_code},'C',(SELECT CODE_A FROM BFS_PROCODE WHERE CODE_GB = 'B' AND CODE = #{up_code})),
		        DECODE(#{code_gb},'A',#{code_nm},'B',(SELECT CODE_NM FROM BFS_PROCODE WHERE CODE = #{up_code}),'C',(SELECT CODE_A_NM FROM BFS_PROCODE WHERE CODE_GB = 'B' AND CODE = #{up_code})),
		        DECODE(#{code_gb},'A','','B',#{code},'C',#{up_code}),
		        DECODE(#{code_gb},'A','','B',#{code_nm},'C',(SELECT CODE_NM FROM BFS_PROCODE WHERE CODE = #{up_code})),
		        DECODE(#{code_gb},'A','','B','','C',#{code}),
		        DECODE(#{code_gb},'A','','B','','C',#{code_nm}),
		        nvl(#{bigo},''), to_char(sysdate,'yyyymmdd'),sysdate)
		]]>
	</insert>
	
	<update id="updatecode_v2" parameterType="first.shopping.admin.bean.MemberBean">
			<![CDATA[
			UPDATE BFS_PROCODE A
			SET     CODE_NM = #{code_nm},
					END_DATE = #{up_code_nm},
			        BIGO = #{bigo},
			        UPDATE_DATE = SYSDATE
			WHERE   CODE = #{code}
			AND     CODE_GB = #{code_gb}
			]]>
	</update>
	
	<update id="updatecode_v2_plus" parameterType="first.shopping.admin.bean.MemberBean">
		<if test="code_gb=='A'.toString()">
			<![CDATA[
			UPDATE BFS_PROCODE A
			SET     CODE_A_NM = #{code_nm},
					END_DATE = #{up_code_nm},
			        UPDATE_DATE = SYSDATE
			WHERE   CODE_A = #{code}
			]]>
		</if>
		
		<if test="code_gb=='B'.toString()">
			<![CDATA[
			UPDATE BFS_PROCODE A
			SET     CODE_B_NM = #{code_nm},
					END_DATE = #{up_code_nm},
			        UPDATE_DATE = SYSDATE
			WHERE   CODE_B = #{code}
			]]>
		</if>
		
		<if test="code_gb=='C'.toString()">
			<![CDATA[
			UPDATE BFS_PROCODE A
			SET     CODE_C_NM = #{code_nm},
					END_DATE = #{up_code_nm},
			        UPDATE_DATE = SYSDATE
			WHERE   CODE_C = #{code}
			]]>
		</if>
	</update>
	
		<select id="ipgolist_getTotalRow" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*) FROM BFS_WORK
		WHERE WORK_GB = #{work_gb}
		<if test="name != null">
			AND CODE_NM LIKE '%' || #{name} || '%' 
		</if>
		<if test="use != null">
			AND DECODE(END_DATE,NULL,'Y','N') LIKE '%' || #{use} || '%' 
		</if>
		<if test="strdate != null">
			<![CDATA[
			AND OFFER_DATE > #{strdate} 
			]]>
		</if>
		<if test="enddate != null">
			<![CDATA[
			AND OFFER_DATE < #{enddate} 
			]]>
		</if>
	</select>
	
	<select id="selectipgolist" resultMap="CodeList">
		<![CDATA[
		SELECT *
		FROM (SELECT ROWNUM RN, A.*
				FROM (  SELECT   A.* 
						FROM    BFS_WORK A
						WHERE   WORK_GB = #{work_gb}
				]]> 
							AND OFFER_DATE BETWEEN #{strdate} AND #{enddate} 
						<if test="bigo_text != null and bigo_text != ''">
							<![CDATA[
							AND BIGO LIKE '%'||#{bigo_text}||'%' 
							]]>
						</if>
						ORDER BY OFFER_NO DESC
						)A)
		WHERE RN BETWEEN #{start} AND #{end}

	</select>
	
	<select id="serchofferno_v2" parameterType="String" resultType="String">
		SELECT  TO_CHAR(SYSDATE,'YYYYMMDD')||DECODE(LENGTH(NVL(MAX(SUBSTR(OFFER_NO,9,2)),'0')+1),'1','0')||(NVL(MAX(SUBSTR(OFFER_NO,9,2)),'0')+1) OFFER_NO
		FROM    BFS_WORK
		WHERE   SUBSTR(OFFER_NO,1,8) = TO_CHAR(SYSDATE,'YYYYMMDD')
	</select>
	
	<insert id="new_work_insert" parameterType="hashmap">
		<![CDATA[
			INSERT INTO BFS_WORK (OFFER_NO, OFFER_DATE,WORK_GB,MAGAM_GB,UPDATE_DATE)
			VALUES (#{new_offer_no}, SUBSTR(#{new_offer_no},1,8),#{work_gb},'1',SYSDATE)
		]]>
	</insert>
	
	<select id="selectwork" resultMap="CodeList">
		<![CDATA[
			SELECT  MAGAM_GB+1 AS NEXT_MAGAM_GB ,A.*
			FROM    BFS_WORK A
			WHERE   OFFER_NO = #{offer_no}
		]]>
	</select>
	
	<select id="selectipgo" resultMap="CodeList">
		<![CDATA[
			SELECT  CODE_B CODE , (SELECT CODE_NM FROM BFS_PROCODE WHERE CODE = A.CODE_B) CODE_NM
			        ,A.*
			FROM    BFS_IPGO A
			WHERE   OFFER_NO = #{offer_no}
			ORDER BY CODE_B ASC
		]]>
	</select>
	
	<select id="selectjin" resultMap="CodeList">
		<![CDATA[
			SELECT CODE_C CODE,(SELECT CODE_NM FROM BFS_PROCODE WHERE CODE = A.CODE_C) CODE_NM
				   ,A.*
			FROM BFS_JIN A
			WHERE OFFER_NO = #{offer_no}
			ORDER BY CODE_B ASC, CODE_C ASC
		]]>
	</select>
	
	
	<select id="new_code_list" resultMap="CodeList">
		<![CDATA[
			SELECT  '1' ROWSPAN, CODE, CODE_NM , CODE_A, CODE_B, CODE_C, '' QTY
			FROM    BFS_PROCODE
			WHERE   CODE_GB = #{code_gb}
			AND     STAR_DATE <= TO_CHAR(SYSDATE,'YYYYMMDD')
			AND     NVL(END_DATE,'29991231')-1 > TO_CHAR(SYSDATE,'YYYYMMDD')
			ORDER BY CODE_A ASC, CODE_B ASC, CODE_C ASC
		]]>
	</select>
	
	<update id="work_update" parameterType="hashmap">
		<![CDATA[
			UPDATE BFS_WORK SET 
								BIGO = #{work_bigo}
		]]>
								,MAGAM_GB = #{next_magam_gb}
								,MAGAM_DATE = DECODE(#{next_magam_gb},'4',SYSDATE,'')
		<![CDATA[
			WHERE   OFFER_NO = #{offer_no}
			AND     MAGAM_GB = #{magam_gb}
		]]>
	</update>
	
	
	<insert id="ipgo_insert" parameterType="hashmap">
		<![CDATA[
			INSERT INTO BFS_IPGO (OFFER_NO, CODE_B, CODE_A, QTY_B)
			VALUES (#{offer_no}, #{b_code}, (SELECT CODE_A FROM BFS_PROCODE WHERE CODE=#{b_code}), #{b_qty_b})
		]]>
	</insert>
	
	<update id="ipgo_update" parameterType="hashmap">
		<![CDATA[
			UPDATE BFS_IPGO
			SET	QTY_B = #{b_qty_b}
				,BIGO_QTY= #{b_bigo_qty}
				,BIGO_GB= #{b_bigo_gb}
				,BIGO = #{b_bigo}
			WHERE OFFER_NO = #{offer_no}
			AND   CODE_B = #{b_code}
		]]>
	</update>
	
	<insert id="jin_insert" parameterType="hashmap">
		<![CDATA[
			INSERT INTO BFS_JIN (OFFER_NO, CODE_B, CODE_C, QTY_C, PRICE)
			VALUES (#{offer_no}, #{c_code_b}, #{c_code}, #{c_qty_c}, #{c_price})
		]]>
	</insert>
	
	<update id="jin_update" parameterType="hashmap">
		<![CDATA[
			UPDATE BFS_JIN 
			SET  QTY_C = #{c_qty_c}
			    ,PRICE = #{c_price}
			WHERE OFFER_NO=#{offer_no}
		    AND   CODE_C = #{c_code}
		]]>
	</update>

	<update id="work_save" parameterType="hashmap">
		<![CDATA[
			UPDATE BFS_WORK SET 
								BIGO = #{work_bigo}
			WHERE   OFFER_NO = #{offer_no}
			AND     MAGAM_GB = #{magam_gb}
		]]>
	</update>
	
	<delete id="product_delete_work" parameterType="hashmap">
		DELETE FROM BFS_WORK
		WHERE OFFER_NO = #{offer_no}
		AND	  WORK_GB = #{work_gb}
	</delete>
	
	<delete id="product_delete_ipgo" parameterType="hashmap">
		DELETE FROM BFS_IPGO
		WHERE OFFER_NO = #{offer_no}
	</delete>
	
	<delete id="product_delete_jin" parameterType="hashmap">
		DELETE FROM BFS_JIN
		WHERE OFFER_NO = #{offer_no}
	</delete>
	
	<select id="selectCalList_v2" resultMap="CalList">
		
			SELECT  OFFER_NO , OFFER_DATE WORK_DATE, SUBSTR(OFFER_NO,9,2) WORK_NUM , WORK_GB,
			        (SELECT KOR_NAME FROM BFS_CODE WHERE MAJOR_CD = 'WKGB' AND MINOR_CD = WORK_GB) WORK_KOR, MAGAM_GB
			FROM    BFS_WORK 
			WHERE   SUBSTR(OFFER_NO,1,6) = DECODE(#{month},'12',#{year}||#{month},'11',#{year}||#{month},'10',#{year}||#{month},#{year}||'0'||#{month})
			ORDER BY WORK_DATE ASC, OFFER_NO ASC
		
	</select>
	
	<select id="selectpreofferno_v2" parameterType="String" resultType="String">
		SELECT  MAX(OFFER_NO)
		FROM    (
		        SELECT  TO_NUMBER(OFFER_NO) OFFER_NO
		        FROM    BFS_WORK
		        WHERE   WORK_GB = 'WK02'
		        UNION
		        SELECT  TO_NUMBER('0')
		        FROM    DUAL)
	</select>
	
	<select id="ipgo_magam_check" parameterType="hashmap" resultType="Integer">
		<![CDATA[
		SELECT COUNT(*)
		FROM BFS_WORK
		]]>
		WHERE OFFER_NO BETWEEN #{pre_offer_no} AND #{new_offer_no}
		<![CDATA[
		AND WORK_GB = 'WK01'
		AND MAGAM_GB <> '4'
		]]>
	</select>
	
	<select id="jego_magam_check()" parameterType="hashmap" resultType="Integer">
		<![CDATA[
		SELECT COUNT(*)
		FROM BFS_WORK
		WHERE WORK_GB = 'WK02'
		AND MAGAM_GB <> '4'
		]]>
	</select>
	
	<insert id="new_jego_insert" parameterType="hashmap">
		INSERT INTO BFS_JEGO (OFFER_NO, CODE_A,QTY_P,UPDATE_DATE)
		SELECT #{new_offer_no}, CODE_A, SUM(QTY_A), SYSDATE
		FROM (SELECT CODE_A , SUM(QTY_B) QTY_A
				FROM (
				SELECT OFFER_NO, CODE_B, CODE_A, DECODE(BIGO_GB,'제거',NVL(QTY_B,0)-NVL(BIGO_QTY,0),'추가',NVL(QTY_B,0)+NVL(BIGO_QTY,0),NVL(QTY_B,0)) QTY_B
				FROM BFS_IPGO A
				WHERE OFFER_NO IN (SELECT OFFER_NO
				                    FROM BFS_WORK
				                    WHERE WORK_GB = 'WK01'
				                    AND OFFER_NO BETWEEN #{pre_offer_no} AND #{new_offer_no}))
				GROUP BY CODE_A
		        UNION
		        SELECT CODE_A, TO_NUMBER(QTY_A)
		        FROM BFS_JEGO A
		        WHERE OFFER_NO IN #{pre_offer_no} )A
		GROUP BY CODE_A
	</insert>
	
	<select id="selectjego" resultMap="CodeList">
		<![CDATA[
			SELECT  CODE_A CODE , (SELECT CODE_NM FROM BFS_PROCODE WHERE CODE = A.CODE_A) CODE_NM
			        ,A.*
			FROM    BFS_JEGO A
			WHERE   OFFER_NO = #{offer_no}
			ORDER BY CODE_A ASC
		]]>
	</select>
	
	<delete id="product_delete_jego" parameterType="hashmap">
		DELETE FROM BFS_JEGO
		WHERE OFFER_NO = #{offer_no}
	</delete>
	
	<update id="jego_update" parameterType="hashmap">
		<![CDATA[
			UPDATE BFS_JEGO
			SET	QTY_A = #{a_qty_a}
				,QTY_D= #{a_qty_d}
				,QTY_P= #{a_qty_p}
				,BIGO_QTY= #{a_bigo_qty}
				,BIGO_GB= #{a_bigo_gb}
				,BIGO = #{a_bigo}
			WHERE OFFER_NO = #{offer_no}
			AND   CODE_A = #{a_code}
		]]>
	</update>
	
	<insert id="new_work_insert_wk02" parameterType="hashmap">
		<![CDATA[
			INSERT INTO BFS_WORK (OFFER_NO, OFFER_DATE,WORK_GB,MAGAM_GB,UPDATE_DATE)
			VALUES (#{new_offer_no}, SUBSTR(#{new_offer_no},1,8),#{work_gb},'3',SYSDATE)
		]]>
	</insert>
	

</mapper>

